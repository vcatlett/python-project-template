[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-project"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "vcatlett-nrao", email = "vcatlett@nrao.edu" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "astropy",
  "ipython",
  "matplotlib",
  "numpy",
  "pandas",
  "scipy",
 ]

[project.optional-dependencies]
dev = [
  "coverage[toml]",
  "ipdb",
  "numpydoc",
  "pytest",
  "pytest-cov",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-inline-tabs",
  "sphinx-rtd-theme",
  "sphinxcontrib-mermaid",
]
nb = [
  "jupyter",
  "jupyterlab",
]
all = ["PythonProject[dev,nb]"]

[project.urls]
Documentation = "https://github.com/vcatlett/PythonProject#readme"
Issues = "https://github.com/vcatlett/PythonProject/issues"
Source = "https://github.com/vcatlett/PythonProject"

[project.scripts]
fdr = "PythonProject.util.files:main_cli"
PythonProject = "PythonProject.shell:main"

[tool.hatch.version]
path = "src/PythonProject/__init__.py"

[tool.hatch.envs.default]
# By default hatch will effectively do $ pip install PythonProject[dev]
features = ["dev"]

# run via: $ hatch run <script>
[tool.hatch.envs.default.scripts]
test = "pytest {args}"
lint = "ruff check . {args}"
lint-all = "ruff check --select ALL {args}"
lint-fix = "ruff check --select ALL --fix {args}"
docs = "sphinx-autobuild {root}/docs/source {root}/docs/build -b html {args}"
docs-build = "sphinx-build {root}/docs/source {root}/docs/build -b html {args}"

[tool.hatch.envs.test]

# run via: $ hatch run test:<script>
[tool.hatch.envs.test.scripts]
matrix = "pytest {args}"
cov = "pytest --cov-report=xml --cov-config=pyproject.toml --cov=src/PythonProject --cov=tests {args}"

# Run tests across all supported version of Python
[[tool.hatch.envs.test.matrix]]
python = ["39", "310", "311", "312"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/bin"]
exclude = [
  "/.github",
  "/.gitignore",
  "*.swp",
  "/attic",
  "/build",
  "/benchmark",
  "/docs",
  "/dist",
  "/notebooks",
]

[tool.hatch.build.targets.wheel]
packages = ["src/PythonProject"]

[tool.coverage.run]

branch = true
source = [
  "src/"
]
parallel = true
omit = [
  "src/PythonProject/__about__.py",
  "*/tests/*",
  "test_*.py"
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.isort]
# See: https://pycqa.github.io/isort/docs/configuration/options/#example-pyprojecttoml
profile = "black"
combine_as_imports = true
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
filter_files = true

[tool.black]
preview = true
line-length = 120

[tool.pyright]
reportImplicitStringConcatenation = false
[tool.ruff]
select = [
  "F",    # https://beta.ruff.rs/docs/rules/#pyflakes-f
  "E",    # https://beta.ruff.rs/docs/rules/#error-e
  "W",    # https://beta.ruff.rs/docs/rules/#warning-w
  "B",    # https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
  "I",    # https://beta.ruff.rs/docs/rules/#isort-i
  "NPY",  # https://beta.ruff.rs/docs/rules/#numpy-specific-rules-npy
  "PD",   # https://beta.ruff.rs/docs/rules/#pandas-vet-pd
  "RUF",  # https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
]
fixable = ["ALL"]
unfixable = ["B"]
ignore = [
  "E741",  # ambiguous-variable-name
]
line-length = 120
src = ["src", "benchmark", "notebooks"]

[tool.ruff.per-file-ignores]
# Ignore  in all `__init__.py` files
"__init__.py" = ["E402", "F405", "F403"]
"**/{tests,docs,tools}/*" = ["E402", "B011"]
# The stuff in the attic doesn't need to be linted at all
"attic/**" = ["ALL"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests", "src", "docs"]
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.pip-tools]
src_files = ["pyproject.toml"]
extra = ["nb", "dev"]
resolver = "backtracking"
output_file= "requirements.txt"
no_strip_extras = true
quiet = true
no_emit_trusted_host = true